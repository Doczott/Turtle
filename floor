-- This program will build a flat layer of blocks of,
-- the specified length and width, the floors width will be
-- expanded to the right.

-- Usage: floor.lua <length> <width> <lighting offset>

params = {...}
-- The input is text so we convert the text to a number.
floorLength = tonumber(params[1])
floorWidth = tonumber(params[2])
floorLight = tonumber(params[3])

matSlot = 1
lightSlot = 3
fuelSlot = 7
mSlot = 9
enderSlot = 16

-- This variable is used to alternate which way we are turning.
turnRight = true

function checkSlot(currentSlot)
  if turtle.getItemCount(currentSlot) == 0 then
    if turtle.detectUp() then
      turtle.select(mSlot)
      turtle.digUp()
    end
    turtle.select(currentSlot + 1)
    turtle.placeUp()
    turtle.select(currentSlot)
    turtle.suckUp()
    turtle.select(currentSlot + 1)
    turtle.digUp()
    turtle.select(currentSlot)
  end
end

function checkFuel()
  if turtle.getFuelLevel() < 20 then
    checkSlot(fuelSlot)
    turtle.select(fuelSlot)
    turtle.refuel()
  end
end

function moveForward()
  moved = false
  while not moved do
    if turtle.forward() then
	  moved = true
	else
	  turtle.select(mSlot)
	  turtle.dig()
	  sleep(1)
	  if checkStorage() and not turtle.detect() then
	    emptyStorage(2)
	  end
	end
  end
end

function checkStorage()
  full = true
  if turtle.getItemCount(15) == 0 then
    full = false
  end
  return full
end

function emptyStorage(dir)
  turtle.select(enderSlot)
  if dir == 0 then
    turtle.placeDown()
  else 
    if dir == 1 then
      turtle.place()
	else
	  turtle.placeUp()
	end
  end
  for i = 7, 15 do
    turtle.select(i)
    if dir == 0 then
      turtle.dropDown()
    else
      if dir == 1 then
	    turtle.drop()
      else
	    turtle.dropUp()
	  end
    end
  end
  turtle.select(enderSlot)
  if dir == 0 then
    turtle.digDown()
  else
    if dir == 1 then
      turtle.dig()
    else
      turtle.digUp()
    end
  end
end

turtle.up()
checkSlot(matSlot)
checkSlot(lightSlot)

for width = 1, floorWidth do

  for length = 1, floorLength do
    checkFuel()
    currentSlot = matSlot
    if ((width + math.floor(floorLight / 2)) % floorLight) == 0 then
      if turnRight then
        if ((length + math.floor(floorLight / 2)) % floorLight) == 0 then
          currentSlot = lightSlot
        end
      else
        if ((floorLength - length - math.floor(floorLight / 2))% floorLight ) == 0 then
          currentSlot = lightSlot
        end
      end
    end
    
    turtle.select(currentSlot)
    if turtle.detectDown() then
      if not turtle.compareDown() then
        turtle.select(mSlot)
        turtle.digDown()
        if checkStorage() then
          emptyStorage()
        end
      end
    end
    turtle.select(currentSlot)
    turtle.placeDown()
    checkSlot(currentSlot)
    if length ~= floorLength then
      moveForward()
    end
    
  end
  
  -- When you get to the end of a row of blocks you need to turn around and setup for the next row,
  -- but every time you turn around you need to alternate the way that you turn.
  -- If this is confusing try drawing it out on a peice of paper.
  if width ~= floorWidth then
    if turnRight then
      turtle.turnRight()
      moveForward()
      turtle.turnRight()
    else
      turtle.turnLeft()
      moveForward()
      turtle.turnLeft()
    end
  end
  
  -- Change so that we turn the other way next time.
  turnRight = not turnRight
end
